import {
    CSSProperties,
    InputHTMLAttributes,
    useEffect,
    useMemo,
    useState
} from "react";
import "./Tasklist.css";

const formateDate = (date: Date): string => {
    return date.toLocaleDateString(navigator.language, {
        day: "numeric",
        month: "short",
        year: "numeric"
    });
};

const CustomInput = ({ ...props }: InputHTMLAttributes<HTMLInputElement>) => {
    const customStyle: CSSProperties = {
        padding: "10px",
        backgroundColor: "#222",
        color: "white",
        border: "1px solid #444",
        borderRadius: "5px"
    };
    // Override the style of the input element
    return <input {...props} style={customStyle} />;
};

const CustomTextArea = ({
    style,
    ...props
}: InputHTMLAttributes<HTMLTextAreaElement>) => {
    const customStyle: CSSProperties = {
        padding: "10px",
        backgroundColor: "#222",
        color: "white",
        border: "1px solid #444",
        borderRadius: "5px"
    };
    // Override the style of the textarea element
    return <textarea {...props} style={{ ...style, ...customStyle }} />;
};

type Task = {
    /** UUID generated by Crypto.randomUUID() */
    id: string;
    name: string;
    createdAt: Date;
    description: string;
    isEmergency: boolean;
    location: string;
    assignees: string[];
};

type SidebarProps = {
    defaultName?: string;
    isOpen: boolean;
    onClose: () => void;
    onSubmit: (task: Omit<Task, "id">) => void;
};

const Sidebar = ({ defaultName, isOpen, onClose, onSubmit }: SidebarProps) => {
    const initialTaskName = defaultName ?? "New Task";
    const [name, setName] = useState(initialTaskName);
    const [createdAt, setCreatedAt] = useState(new Date());
    const [description, setDescription] = useState("");
    const [location, setLocation] = useState("");
    const [assignees, setAssignees] = useState("");
    const isValidTask = () => {
        return (
            name.length > 0 &&
            description.length > 0 &&
            location.length > 0 &&
            assignees.length > 0
        );
    };
    const isValidMemo = useMemo(isValidTask, [
        name,
        description,
        location,
        assignees
    ]);

    const isInitialTaskName = useMemo(
        () => name === initialTaskName,
        [name, defaultName]
    );

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        onSubmit({
            name,
            createdAt,
            description,
            location,
            assignees: assignees.split(",").map((a) => a.trim()),
            isEmergency: false
        });
        setName("");
        setCreatedAt(new Date());
        setDescription("");
        setLocation("");
        setAssignees("");
        onClose();
    };

    return (
        <div className={`sidebar${isOpen ? " open" : ""}`}>
            <div style={{ display: "flex", justifyContent: "end" }}>
                <button onClick={handleSubmit} disabled={!isValidMemo}>
                    Create Task
                </button>
                <button onClick={onClose}>Cancel</button>
            </div>
            <form className="sidebar-form" onSubmit={handleSubmit}>
                <input
                    type="text"
                    className={`title-input${
                        isInitialTaskName ? " initial" : ""
                    }`}
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                />
                <div>
                    <div>Created At:</div>
                    <div>{formateDate(createdAt)}</div>
                </div>
                <div>
                    <label htmlFor="assignees">Assignees</label>
                    <CustomInput
                        id="assignees"
                        type="text"
                        placeholder="Assignees (comma-separated)"
                        value={assignees}
                        onChange={(e) => setAssignees(e.target.value)}
                        required
                    />
                </div>
                <div>
                    <label htmlFor="location">Location</label>
                    <CustomInput
                        id="location"
                        type="text"
                        placeholder="Location"
                        value={location}
                        onChange={(e) => setLocation(e.target.value)}
                        required
                    />
                </div>
                <div>
                    <label htmlFor="description" style={{ width: "100%" }}>
                        Description
                    </label>
                    <CustomTextArea
                        id="description"
                        placeholder="Description"
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        style={{
                            width: "100%",
                            minHeight: "calc(256/1080 * 100vh)"
                        }}
                    />
                </div>
            </form>
        </div>
    );
};

type TaskListHeaderProps = {
    progress: string;
    onClick: () => void;
};

const TaskListHeader = ({ progress, onClick }: TaskListHeaderProps) => {
    return (
        <div className="tasklist-header">
            <h2>Tasks</h2>
            <div className="progress-bar-container">
                <div className="progress-bar" style={{ width: progress }}></div>
                <span className="progress-text">1/3</span>
            </div>
            <button className="new-task-button" onClick={onClick}>
                New Task
            </button>
        </div>
    );
};

const TaskList = () => {
    const [tasks, setTasks] = useState<Task[]>([]);
    const [addingTask, setAddingTask] = useState(false);
    const [taskName, setTaskName] = useState("");
    const [taskLocation, setTaskLocation] = useState("");
    const [taskAssignees, setTaskAssignees] = useState("");
    const [taskDescription, setTaskDescription] = useState("");

    const toggleEmergency = (id: Task["id"]) => {
        setTasks(
            tasks.map((task) =>
                task.id === id
                    ? { ...task, isEmergency: !task.isEmergency }
                    : task
            )
        );
    };

    useEffect(() => {
        const handleEscape = (e: KeyboardEvent) => {
            if (e.key === "Escape") {
                setAddingTask(false);
            }
        };
        window.addEventListener("keydown", handleEscape);
        return () => window.removeEventListener("keydown", handleEscape);
    });

    const handleTaskCreation = (task: Omit<Task, "id">) => {
        const taskNames = tasks.map((task) => task.name);
        while (taskNames.includes(task.name)) {
            const number = task.name.match(/.+ \((\d)\)$/);
            if (number) {
                task.name = task.name.replace(
                    /\d\)$/,
                    `${parseInt(number[1], 10) + 1})`
                );
            } else {
                task.name = `${task.name} (1)`;
            }
        }
        setTasks([...tasks, { id: crypto.randomUUID(), ...task }]);
    };

    return (
        <div>
            <div className={`tasklist${addingTask ? " adding-task" : ""}`}>
                <TaskListHeader
                    progress={`${(tasks.length / 3) * 100}%`}
                    onClick={() => setAddingTask(true)}
                />

                <div className="task-inputs">
                    <input
                        type="text"
                        placeholder="Task Name"
                        value={taskName}
                        onChange={(e) => setTaskName(e.target.value)}
                    />
                    <input
                        type="text"
                        placeholder="Location"
                        value={taskLocation}
                        onChange={(e) => setTaskLocation(e.target.value)}
                    />
                    <input
                        type="text"
                        placeholder="Assignees (comma-separated)"
                        value={taskAssignees}
                        onChange={(e) => setTaskAssignees(e.target.value)}
                    />
                    <textarea
                        placeholder="Description"
                        value={taskDescription}
                        onChange={(e) => setTaskDescription(e.target.value)}
                    />
                    <button onClick={() => setAddingTask(true)}>
                        Add Task
                    </button>
                </div>

                <table className="tasklist-table">
                    <thead>
                        <tr className="tasklist-table-header">
                            <th>Name</th>
                            <th>Description</th>
                            <th>Location</th>
                            <th>Assignee</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {tasks.map((task) => (
                            <tr key={task.id} className="tasklist-row">
                                <td>{task.name}</td>
                                <td className="description-cell">
                                    {task.description}
                                </td>
                                <td>{task.location}</td>
                                <td>
                                    {task.assignees.map((assignee, index) => (
                                        <span
                                            key={index}
                                            className="assignee-badge"
                                        >
                                            {assignee}
                                        </span>
                                    ))}
                                </td>
                                <td>
                                    <button
                                        onClick={() => toggleEmergency(task.id)}
                                    >
                                        {task.isEmergency
                                            ? "Unmark Emergency"
                                            : "Mark Emergency"}
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            <Sidebar
                isOpen={addingTask}
                onClose={() => setAddingTask(false)}
                onSubmit={handleTaskCreation}
            />
        </div>
    );
};

export default TaskList;
